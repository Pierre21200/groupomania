[{"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\index.js":"1","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\App.js":"3","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\index.js":"4","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\LogIn\\index.js":"5","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\FetchData\\Users\\index.js":"6","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\Sidebar\\index.js":"7","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\Posts\\index.js":"8","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Input\\index.js":"9","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\Posts\\Comments\\index.js":"10","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Button\\index.js":"11","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\User\\index.js":"12","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\DecodeToken\\index.js":"13","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\FetchData\\Posts\\index.js":"14","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\FetchData\\Comments\\index.js":"15","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Form\\index.js":"16","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\PrivateRoute\\index.js":"17","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\Page404\\index.js":"18","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Modal\\index.js":"19","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Moderate\\index.js":"20","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Textarea\\index.js":"21"},{"size":500,"mtime":1611165248700,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1609252129000,"results":"24","hashOfConfig":"23"},{"size":1648,"mtime":1617021661086,"results":"25","hashOfConfig":"23"},{"size":1012,"mtime":1617020662000,"results":"26","hashOfConfig":"23"},{"size":1164,"mtime":1616996289019,"results":"27","hashOfConfig":"23"},{"size":1588,"mtime":1617103996898,"results":"28","hashOfConfig":"23"},{"size":2063,"mtime":1617008774775,"results":"29","hashOfConfig":"23"},{"size":8627,"mtime":1617116097127,"results":"30","hashOfConfig":"23"},{"size":487,"mtime":1615967422359,"results":"31","hashOfConfig":"23"},{"size":5307,"mtime":1617005706374,"results":"32","hashOfConfig":"23"},{"size":427,"mtime":1612793843819,"results":"33","hashOfConfig":"23"},{"size":756,"mtime":1617184945461,"results":"34","hashOfConfig":"23"},{"size":339,"mtime":1617000675000,"results":"35","hashOfConfig":"23"},{"size":943,"mtime":1617104163427,"results":"36","hashOfConfig":"23"},{"size":771,"mtime":1615711314924,"results":"37","hashOfConfig":"23"},{"size":9190,"mtime":1617006814491,"results":"38","hashOfConfig":"23"},{"size":628,"mtime":1615809997449,"results":"39","hashOfConfig":"23"},{"size":118,"mtime":1615890650899,"results":"40","hashOfConfig":"23"},{"size":5042,"mtime":1617008544778,"results":"41","hashOfConfig":"23"},{"size":156,"mtime":1617008554181,"results":"42","hashOfConfig":"23"},{"size":511,"mtime":1617003145926,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"5mbk5g",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\index.js",[],["93","94"],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\App.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\LogIn\\index.js",["95"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Form from \"../SubComponents/Form/index.js\";\nimport \"./LogIn.css\";\nimport logo from \"../../icons/icon-c.png\";\nimport { UserContext } from \"../../App.js\";\n\nfunction LogIn() {\n  const auth = useContext(UserContext);\n  const [redirectToHome, setRedirectToHome] = useState(false);\n\n  const getRedirectToHome = () => {\n    if (auth?.user) {\n      setRedirectToHome(true);\n    }\n  };\n\n  useEffect(() => {\n    getRedirectToHome();\n  }, [auth, redirectToHome]);\n\n  return redirectToHome ? (\n    <Redirect to={{ pathname: \"/\" }} />\n  ) : (\n    <div className=\"login-container\">\n      <header className=\"login-header\">\n        <div className=\"login-container-title\">\n          <img className=\"login-logo\" src={logo} alt=\"groupomania-logo\" />\n          <h1 className=\"login-title\">Groupomania</h1>\n        </div>\n        <p className=\"login-subtitle\">Votre nouveau réseau d'entreprise</p>\n      </header>\n      <div className=\"form-container\">\n        <Form logIn={true} />\n        <Form signIn={true} />\n      </div>\n    </div>\n  );\n}\n\nexport default LogIn;\n","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\FetchData\\Users\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\Sidebar\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\Posts\\index.js",["96"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport Comments from \"./Comments/index.js\";\r\nimport Input from \"../../SubComponents/Input/index\";\r\nimport Textarea from \"../../SubComponents/Textarea/index\";\r\nimport User from \"../../SubComponents/User/index\";\r\nimport decodedToken from \"../../Utils/DecodeToken/index\";\r\nimport Button from \"../../SubComponents/Button/index\";\r\nimport { UserContext } from \"../../../App.js\";\r\nimport {\r\n  getPosts,\r\n  postPost,\r\n  updatePost,\r\n  getUserPosts\r\n} from \"../../Utils/FetchData/Posts/index\";\r\nimport { getUser, updateProfile } from \"../../Utils/FetchData/Users/index\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\n\r\nconst Posts = ({ userPosts }) => {\r\n  const userId = useParams();\r\n  const auth = useContext(UserContext); // auth Context\r\n  const token = localStorage.getItem(\"token\"); // token localStorage\r\n\r\n  // if userPosts is true\r\n  const [user, setUser] = useState(\"\"); // Stock les valeurs du user selectionné par le modérateur\r\n  const [redirectToHome, setRedirectToHome] = useState(false); // if userPosts est true\r\n\r\n  // Concernant redirection vers login\r\n  const [redirectToLogin, setRedirectToLogin] = useState(false); // redirection si pas de token\r\n\r\n  // Les posts qui apparaissent (deux possibiltié : tout les posts, ou les posts d'un seul utilisateur)\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  // Concernant toutes les logiques pour déployer des fenêtres\r\n  const [dropdownCreatePost, setDropdownCreatePost] = useState(false); // faire apparaitre création de poste\r\n\r\n  // Concernant posts\r\n  const [postTitle, setPostTitle] = useState(\"\"); // titre du post\r\n  const [postContent, setPostContent] = useState(\"\"); // contenu du post\r\n  const [validPostTitle, setValidPostTitle] = useState(false); // regex titre du post\r\n  const [validPostContent, setValidPostContent] = useState(false); // regex contenu du post\r\n  const [majPost, setMajPost] = useState(false); // ajout ou modération d'un post\r\n\r\n  // Pour le modérateur, stock l'id de l'utilisateur que l'on veut visionner, puis passe cette valeur dans la props de posts\r\n  const [profile, setProfile] = useState(false); //\r\n\r\n  // gestion d'événements des inputs\r\n  const handleChangePostTitle = event => {\r\n    setPostTitle(event.target.value);\r\n    setValidPostTitle(event.target.value !== \"\" ? true : false);\r\n  };\r\n  const handleChangePostContent = event => {\r\n    setPostContent(event.target.value);\r\n    setValidPostContent(event.target.value !== \"\" ? true : false);\r\n  };\r\n\r\n  // On utilise cette fonction avant chaque reqûete vers le backend afin d'éviter une erreur serveur si token est expiré\r\n  const getRedirectToLogin = () => {\r\n    const decode = decodedToken();\r\n    if (!decode) {\r\n      setRedirectToLogin(true);\r\n      auth.setUser(null);\r\n    }\r\n  };\r\n\r\n  // get + set posts : deux options, userPosts est true or not\r\n  const fetchPosts = async () => {\r\n    if (userPosts) {\r\n      const resultPosts = await getUserPosts(token, userId.id);\r\n      const resultUser = await getUser(token, userId.id);\r\n      setUser(resultUser.data.userFound);\r\n      setPosts(resultPosts.data.allPosts);\r\n      setProfile(false);\r\n    } else {\r\n      const result = await getPosts(token);\r\n      setPosts(result.data.allPosts);\r\n      setRedirectToHome(false);\r\n    }\r\n  };\r\n\r\n  // Création d'un post\r\n  const creatingPost = async () => {\r\n    getRedirectToLogin();\r\n    const decode = decodedToken();\r\n    if (decode) {\r\n      try {\r\n        await postPost(postTitle, postContent, token);\r\n        setMajPost(!majPost);\r\n        setPostTitle(\"\");\r\n        setPostContent(\"\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      console.log(\"Votre session a expiré\");\r\n    }\r\n  };\r\n\r\n  // Modération d'un post\r\n  const moderatePost = async postId => {\r\n    await updatePost(token, postId);\r\n    setMajPost(true);\r\n  };\r\n\r\n  // Modération d'un profil en tant que modérator\r\n  const moderateProfile = async userId => {\r\n    await updateProfile(token, userId);\r\n    setRedirectToHome(true);\r\n  };\r\n\r\n  // Fonction useEffect\r\n  useEffect(() => {\r\n    getRedirectToLogin();\r\n    const decode = decodedToken();\r\n    if (decode) {\r\n      fetchPosts();\r\n    }\r\n  }, [majPost, userPosts]);\r\n\r\n  return redirectToLogin ? (\r\n    <Redirect to={{ pathname: \"/login\" }} />\r\n  ) : profile ? (\r\n    <Redirect to={{ pathname: `/profile/${profile}` }} />\r\n  ) : redirectToHome ? (\r\n    <Redirect to={{ pathname: \"/\" }} />\r\n  ) : (\r\n    <div>\r\n      {!userPosts ? (\r\n        <div>\r\n          {\" \"}\r\n          <Button\r\n            onClick={() => setDropdownCreatePost(!dropdownCreatePost)}\r\n            disabled=\"\"\r\n            className=\"btn btn-outline-primary bouton btn-seecreatingpost\"\r\n            value=\"Créer un nouveau post\"\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            <Button\r\n              onClick={() => setRedirectToHome(true)}\r\n              disabled=\"\"\r\n              className=\"btn btn-outline-primary bouton btn-seecreatingpost\"\r\n              value=\"Retour à tous les posts\"\r\n            />\r\n          </div>\r\n          <div className=\"profile\">\r\n            <div className=\"container-moderate\">\r\n              <i\r\n                onClick={() => moderateProfile(userId.id)}\r\n                className=\"btn-moderate far fa-times-circle fa-2x\"\r\n              ></i>\r\n            </div>\r\n            <div className=\"profile-infos\">\r\n              <p className=\"infos-title\">Identifiant</p>\r\n              <p> {user.id}</p>\r\n            </div>\r\n            <div className=\"profile-infos\">\r\n              <p className=\"infos-title\">Prénom</p>\r\n              <p> {user.firstName}</p>\r\n            </div>\r\n            <div className=\"profile-infos\">\r\n              <p className=\"infos-title\">Nom</p>\r\n              <p> {user.lastName}</p>\r\n            </div>\r\n            <div className=\"profile-infos\">\r\n              <p className=\"infos-title\">Email</p>\r\n              <p> {user.email}</p>\r\n              <p> {user.active}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {dropdownCreatePost ? (\r\n        <div id=\"createPostForm\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <Input\r\n                className=\"new-post-title form-control\"\r\n                name=\"Titre du post\"\r\n                onChange={handleChangePostTitle}\r\n                value={postTitle}\r\n              />\r\n              <Textarea\r\n                className=\"new-post-content form-control\"\r\n                name=\"Contenu du post\"\r\n                onChange={handleChangePostContent}\r\n                value={postContent}\r\n              />\r\n              <Button\r\n                onClick={creatingPost}\r\n                disabled={validPostTitle && validPostContent ? \"\" : \"disabled\"}\r\n                value=\"Envoyer\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      {console.log(posts)}\r\n      {posts.map(post => (\r\n        <div key={post.id} id={post.id} className=\"card\">\r\n          <div className=\"card-body\">\r\n            <div className=\"card-header row\">\r\n              <h6 className=\"post-user col-4\">\r\n                {auth?.user.moderator && !userPosts ? (\r\n                  <Button\r\n                    className=\"btn btn-outline-primary btn-post\"\r\n                    disabled=\"\"\r\n                    onClick={() => setProfile(post.userId)}\r\n                    value={<User id={post.userId} />}\r\n                    // value={<User id={1} />}\r\n                  />\r\n                ) : (\r\n                  // <div>{<User id={2} />}</div>\r\n                  <div>{<User id={post.userId} />}</div>\r\n                  // <div>User</div>\r\n                )}\r\n              </h6>\r\n              <h6 className=\"post-title col-4\">{post.titlePost}</h6>\r\n              {auth?.user.moderator ? (\r\n                <div className=\"col-4 container-moderate\">\r\n                  <i\r\n                    onClick={() => moderatePost(post.id)}\r\n                    className=\"btn-moderate far fa-times-circle fa-2x\"\r\n                  ></i>\r\n                </div>\r\n              ) : (\r\n                <div className=\"col-4\"></div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"line\"></div>\r\n\r\n            <p className=\"post-content\">{post.content}</p>\r\n\r\n            <div className=\"line\"></div>\r\n\r\n            <div>\r\n              <Comments postId={post.id} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Input\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Home\\Posts\\Comments\\index.js",["97"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  getComments,\r\n  updateComment\r\n} from \"../../../Utils/FetchData/Comments/index\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport User from \"../../../SubComponents/User/index\";\r\nimport Button from \"../../../SubComponents/Button/index\";\r\nimport { UserContext } from \"../../../../App.js\";\r\nimport decodedToken from \"../../../Utils/DecodeToken/index\";\r\nimport { postComments } from \"../../../Utils/FetchData/Comments/index.js\";\r\nimport Textarea from \"../../../SubComponents/Textarea/index\";\r\nimport Modal from \"../../../SubComponents/Modal/index\";\r\n\r\nconst Comments = ({ postId }) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const auth = useContext(UserContext); // auth Context\r\n\r\n  const [comments, setComments] = useState([]); // stock les commentaires\r\n  const [majComment, setMajComment] = useState(false); // modération d'un post\r\n\r\n  const [modalModerateComment, setModalModerateComment] = useState(false); // faire apparaitre création de poste\r\n\r\n  const [redirectToLogin, setRedirectToLogin] = useState(false); // redirection si pas de token\r\n\r\n  // Concernant comments\r\n  const [dropdownComments, setDropdownComments] = useState(false); // faire apparaitre création de commentaire et commentaires\r\n  const [commentContent, setCommentContent] = useState(\"\"); // contenu du commentaire\r\n  const [validCommentContent, setValidCommentContent] = useState(false); // regex contenu du commentaire\r\n\r\n  const fetchComments = async () => {\r\n    const result = await getComments(token, postId);\r\n    if (result) {\r\n      setComments(result.data.postComments);\r\n    }\r\n  };\r\n\r\n  // gestion d'evenement de l'input\r\n  const handleChangeCommentContent = event => {\r\n    setCommentContent(event.target.value);\r\n    setValidCommentContent(event.target.value !== \"\" ? true : false);\r\n  };\r\n\r\n  // Création d'un commentaire\r\n  const creatingComment = async postId => {\r\n    getRedirectToLogin();\r\n    const decode = decodedToken();\r\n    if (decode) {\r\n      try {\r\n        let userId = auth.user.id;\r\n        await postComments(token, userId, postId, commentContent);\r\n        setMajComment(!majComment);\r\n        setCommentContent(\"\");\r\n        console.log(\"Le commentaire a bien été créé\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    } else {\r\n      console.log(\"Votre session a expiré\");\r\n    }\r\n  };\r\n\r\n  // Modération d'un commentaire\r\n  const moderateComment = async commentId => {\r\n    await updateComment(token, commentId);\r\n    setMajComment(!majComment);\r\n    setModalModerateComment(false);\r\n  };\r\n\r\n  // redirection à la page de connexion si token inexistant ou expiré\r\n  const getRedirectToLogin = () => {\r\n    const decode = decodedToken();\r\n    if (!decode) {\r\n      setRedirectToLogin(true);\r\n      auth.setUser(null);\r\n    }\r\n  };\r\n\r\n  // gestion de dropdownComments\r\n  const seeComments = postId => {\r\n    if (dropdownComments === postId) {\r\n      setDropdownComments(false);\r\n    } else {\r\n      setDropdownComments(postId);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [majComment]);\r\n\r\n  return redirectToLogin ? (\r\n    <Redirect to={{ pathname: \"/login\" }} />\r\n  ) : (\r\n    <div>\r\n      {modalModerateComment ? (\r\n        <Modal\r\n          sidebar={true}\r\n          title=\"Suppression d'un commentaire\"\r\n          content=\"Vous êtes sur le point de supprimer un commentaire, êtes vous sur ?\"\r\n        />\r\n      ) : null}\r\n      <Button\r\n        className=\"btn btn-outline-primary btn-see-comments\"\r\n        disabled=\"\"\r\n        value=\"Commentaires\"\r\n        onClick={() => seeComments(postId)}\r\n      />\r\n      {dropdownComments && dropdownComments === postId ? (\r\n        <div>\r\n          <div>\r\n            <div>\r\n              {comments.map(comment => (\r\n                <div className=\"comment\" id={comment.id} key={comment.id}>\r\n                  <div className=\"comment-user\">\r\n                    <User id={comment.userId} />\r\n                  </div>\r\n                  <div className=\"comment-content\">{comment.content}</div>\r\n                  {auth?.user.moderator ? (\r\n                    <div className=\"container-moderate\">\r\n                      <i\r\n                        onClick={() => moderateComment(comment.id)}\r\n                        className=\"btn-moderate far fa-times-circle fa-2x\"\r\n                      ></i>\r\n                    </div>\r\n                  ) : null}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"comments row\">\r\n              <div className=\"col-9\">\r\n                <Textarea\r\n                  className=\"input-newComment form-control\"\r\n                  name=\"Commenter ce post\"\r\n                  onChange={handleChangeCommentContent}\r\n                  value={commentContent}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-3\">\r\n                <Button\r\n                  className=\"btn btn-outline-primary btn-new-comment\"\r\n                  onClick={() => creatingComment(postId)}\r\n                  disabled={validCommentContent ? \"\" : \"disabled\"}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Button\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\User\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\DecodeToken\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\FetchData\\Posts\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\FetchData\\Comments\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Form\\index.js",["98","99"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport Input from \"../Input/index.js\";\r\nimport Button from \"../Button/index.js\";\r\nimport Modal from \"../Modal/index.js\";\r\nimport { UserContext } from \"../../../App.js\";\r\nimport {\r\n  signUser,\r\n  logUser,\r\n  updateUserData,\r\n  updatePassword\r\n} from \"../../Utils/FetchData/Users/index\";\r\n\r\nconst Form = ({ signIn, logIn, updateUser }) => {\r\n  const auth = useContext(UserContext);\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [errorLogin, setErrorLogin] = useState(false);\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [validFirstName, setValidFirstName] = useState(false);\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [validLastName, setValidLastName] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [validEmail, setValidEmail] = useState(false);\r\n  const [validEmailLog, setValidEmailLog] = useState(false);\r\n  const [password, setPassword] = useState(\"\");\r\n  const [validPassword, setValidPassword] = useState(false);\r\n  const [validPasswordLog, setValidPasswordLog] = useState(false);\r\n\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [validNewPassword, setValidNewPassword] = useState(false);\r\n\r\n  const [update, setUpdate] = useState(false);\r\n  const [confirmUpdatePassword, setConfirmUpdatePassword] = useState(false);\r\n\r\n  const emailReg = new RegExp(/^([\\w-\\.]+)@((?:[\\w]+\\.)+)([a-zA-Z]{2,4})/);\r\n  const passwordReg = new RegExp(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/);\r\n\r\n  function handleChangeFirstname(event) {\r\n    setFirstName(event.target.value);\r\n    setValidFirstName(event.target.value !== \"\" ? true : false);\r\n  }\r\n\r\n  function handleChangeLastname(event) {\r\n    setLastName(event.target.value);\r\n    setValidLastName(event.target.value !== \"\" ? true : false);\r\n  }\r\n\r\n  function handleChangeEmail(event) {\r\n    setEmail(event.target.value);\r\n    setValidEmailLog(event.target.value !== \"\" ? true : false);\r\n    setValidEmail(emailReg.test(event.target.value) ? true : false);\r\n  }\r\n\r\n  function handleChangePassword(event) {\r\n    setPassword(event.target.value);\r\n    setValidPasswordLog(event.target.value !== \"\" ? true : false);\r\n    setValidPassword(passwordReg.test(event.target.value) ? true : false);\r\n  }\r\n\r\n  function handleChangeNewPassword(event) {\r\n    setNewPassword(event.target.value);\r\n    setValidNewPassword(event.target.value !== \"\" ? true : false);\r\n  }\r\n\r\n  const login = async () => {\r\n    try {\r\n      const result = await logUser(email, password);\r\n      if (result) {\r\n        auth.setUser(result.data.user);\r\n        localStorage.setItem(\"token\", result.data.token);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setErrorLogin(true);\r\n    }\r\n  };\r\n\r\n  const signup = async () => {\r\n    try {\r\n      const result = await signUser(firstName, lastName, email, password);\r\n\r\n      if (result) {\r\n        auth.setUser(result.data.user);\r\n        localStorage.setItem(\"token\", result.data.token);\r\n        console.log(\"Utilisateur suivant a bien été créé :\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const confirmUpdateProfile = () => {\r\n    setUpdate(!update);\r\n  };\r\n\r\n  const updateProfile = async () => {\r\n    try {\r\n      const result = await updateUserData(firstName, lastName, email, token);\r\n      if (result) {\r\n        window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const updateNewPassword = async () => {\r\n    try {\r\n      const result = await updatePassword(password, newPassword, token);\r\n      if (result) {\r\n        window.location.reload();\r\n        console.log(\"Le mot de passe a bien été modifié\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={updateUser ? \"update-form\" : null}>\r\n      {update ? (\r\n        <Modal\r\n          fisrtNameBefore={auth.user.firstName}\r\n          fisrtNameAfter={firstName}\r\n          lastNameBefore={auth.user.lastName}\r\n          lastNameAfter={lastName}\r\n          emailBefore={auth.user.email}\r\n          emailAfter={email}\r\n          onclickYes={updateProfile}\r\n          onclickCancel={confirmUpdateProfile}\r\n        />\r\n      ) : null}\r\n\r\n      {signIn ? (\r\n        <div>\r\n          <div>\r\n            <p>\r\n              Vous n'avez pas encore de compte ?<br />\r\n              Inscrivez-vous !\r\n            </p>\r\n          </div>\r\n          <Input\r\n            name=\"Prénom\"\r\n            onChange={handleChangeFirstname}\r\n            value={firstName}\r\n          />\r\n\r\n          <Input name=\"Nom\" onChange={handleChangeLastname} value={lastName} />\r\n          <Input\r\n            type=\"email\"\r\n            name=\"Email\"\r\n            onChange={handleChangeEmail}\r\n            value={email}\r\n          />\r\n\r\n          {email && !validEmail ? (\r\n            <p className=\"msgInvalid\">Cet email n'est pas valide</p>\r\n          ) : null}\r\n          {validEmail ? <p className=\"msgValid\">Cet email est valide</p> : null}\r\n\r\n          <Input\r\n            type=\"password\"\r\n            name=\"Mot de passe\"\r\n            onChange={handleChangePassword}\r\n            value={password}\r\n          />\r\n\r\n          {password && !validPassword ? (\r\n            <p className=\"msgInvalid\">\r\n              Le mot de passe doit contenir 8 caractères au minimum, un chiffre\r\n              et un lettre\r\n            </p>\r\n          ) : null}\r\n          {validPassword ? (\r\n            <p className=\"msgValid\">Ce mot de passe est valide</p>\r\n          ) : null}\r\n\r\n          <Button\r\n            onClick={signup}\r\n            disabled={\r\n              validPassword &&\r\n              validEmail &&\r\n              validFirstName &&\r\n              validLastName === true\r\n                ? \"\"\r\n                : \"disabled\"\r\n            }\r\n          />\r\n        </div>\r\n      ) : null}\r\n\r\n      {logIn ? (\r\n        <div>\r\n          <div>\r\n            <p>\r\n              Vous êtes déjà inscrit ?<br />\r\n              Connectez-vous !\r\n            </p>\r\n          </div>\r\n          <Input name=\"Email\" onChange={handleChangeEmail} value={email} />\r\n\r\n          <Input\r\n            name=\"Mot de passe\"\r\n            type=\"password\"\r\n            onChange={handleChangePassword}\r\n            value={password}\r\n          />\r\n\r\n          <Button\r\n            onClick={login}\r\n            disabled={\r\n              validPasswordLog && validEmailLog === true ? \"\" : \"disabled\"\r\n            }\r\n          />\r\n          {errorLogin ? (\r\n            <p className=\"msgInvalid\">Ces informations sont erronées</p>\r\n          ) : null}\r\n        </div>\r\n      ) : null}\r\n\r\n      {updateUser ? (\r\n        <div>\r\n          <div className=\"form-update-profile\">\r\n            <div>\r\n              <p className=\"msgValidSidebar\">\r\n                Modifiez vos informations générales !\r\n              </p>\r\n            </div>\r\n            <Input\r\n              name={auth.user.firstName}\r\n              onChange={handleChangeFirstname}\r\n              value={firstName}\r\n            />\r\n            <Input\r\n              name={auth.user.lastName}\r\n              onChange={handleChangeLastname}\r\n              value={lastName}\r\n            />\r\n            <Input\r\n              type=\"email\"\r\n              name={auth.user.email}\r\n              onChange={handleChangeEmail}\r\n              value={email}\r\n            />\r\n            {email && !validEmail ? (\r\n              <p className=\"msgInvalid\">Cet email n'est pas valide</p>\r\n            ) : null}\r\n            {validEmail ? (\r\n              <p className=\"msgValidSidebar\">Cet email est valide</p>\r\n            ) : null}\r\n            <Button\r\n              className=\"btn btn-outline-light\"\r\n              onClick={confirmUpdateProfile}\r\n              disabled={\r\n                validEmail && validFirstName && validLastName === true\r\n                  ? \"\"\r\n                  : \"disabled\"\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"form-update-password\">\r\n            <p className=\"msgValidSidebar\">Modifiez votre mot de passe !</p>\r\n            <Input\r\n              type=\"password\"\r\n              name=\"Mot de passe actuel\"\r\n              onChange={handleChangePassword}\r\n              value={password}\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              name=\"Nouveau mot de passe\"\r\n              onChange={handleChangeNewPassword}\r\n              value={newPassword}\r\n            />\r\n            {confirmUpdatePassword ? (\r\n              <Button\r\n                className=\"btn btn-outline-danger btn-confirm\"\r\n                onClick={updateNewPassword}\r\n                disabled={validPassword && validNewPassword ? \"\" : \"disabled\"}\r\n                value=\"Confirmer la modification du mot de passe\"\r\n              />\r\n            ) : (\r\n              <Button\r\n                className=\"btn btn-outline-light\"\r\n                onClick={() => setConfirmUpdatePassword(true)}\r\n                disabled={validPassword && validNewPassword ? \"\" : \"disabled\"}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\PrivateRoute\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\Utils\\Page404\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Modal\\index.js",[],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Moderate\\index.js",["100"],"import React from \"react\";\r\nimport \"./Moderate.css\";\r\nimport Button from \"../Button/index\";\r\n\r\n// const Moderate = ({ onClick }) => {\r\n//   return (\r\n//     <i onClick={onClick} className=\"btn-moderate far fa-times-circle fa-2x\"></i>\r\n//   );\r\n// };\r\n\r\nconst Moderate = () => {\r\n  return <i className=\"btn-moderate far fa-times-circle fa-2x\"></i>;\r\n};\r\nexport default Moderate;\r\n",["101","102"],"C:\\Users\\pierr\\Desktop\\groupomania-show\\frontend\\src\\components\\SubComponents\\Textarea\\index.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":20,"column":6,"nodeType":"109","endLine":20,"endColumn":28,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"111","line":117,"column":6,"nodeType":"109","endLine":117,"endColumn":26,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"113","line":91,"column":6,"nodeType":"109","endLine":91,"endColumn":18,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":39,"nodeType":"117","messageId":"118","endLine":1,"endColumn":48},{"ruleId":"119","severity":1,"message":"120","line":35,"column":38,"nodeType":"121","messageId":"122","endLine":35,"endColumn":39,"suggestions":"123"},{"ruleId":"115","severity":1,"message":"124","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":14},{"ruleId":"103","replacedBy":"125"},{"ruleId":"105","replacedBy":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRedirectToHome'. Either include it or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect has missing dependencies: 'fetchPosts' and 'getRedirectToLogin'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.",["131"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["132","133"],"'Button' is defined but never used.",["127"],["128"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"messageId":"140","fix":"141","desc":"142"},{"messageId":"143","fix":"144","desc":"145"},"Update the dependencies array to be: [auth, getRedirectToHome, redirectToHome]",{"range":"146","text":"147"},"Update the dependencies array to be: [fetchPosts, getRedirectToLogin, majPost, userPosts]",{"range":"148","text":"149"},"Update the dependencies array to be: [fetchComments, majComment]",{"range":"150","text":"151"},"removeEscape",{"range":"152","text":"153"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"154","text":"155"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[544,566],"[auth, getRedirectToHome, redirectToHome]",[4242,4262],"[fetchPosts, getRedirectToLogin, majPost, userPosts]",[3118,3130],"[fetchComments, majComment]",[1410,1411],"",[1410,1410],"\\"]